# GraphQL Schema for Prana AI v2 (Amplify Backend)

# Placeholder Query type required by AppSync
type Query {
  _: String # Allows schema to compile, actual queries generated by @model
}

# Non-model type for embedded Exercise details
type Exercise {
  id: ID!
  name: String!
  sets: String
  reps: String
  weight: String
  restPeriod: Int
  note: String
}

# Workout Template Model (maps to DynamoDB table)
# Includes owner-based authorization via Cognito User Pools
type WorkoutTemplate @model @auth(rules: [
  { allow: owner, operations: [create, read, update, delete] }
]) {
  id: ID!                                      # Auto-generated by DataStore/AppSync
  userId: ID! @index(name: "byUserId", queryField: "templatesByUserId") # Owner's Cognito Sub/ID for querying
  name: String!                                # Name of the template
  description: String                          # Optional description added earlier
  exercises: [Exercise]                        # List of exercises embedded in the template
  # createdAt: AWSDateTime - Field removed, automatically handled by @model
  # updatedAt: AWSDateTime - Field automatically handled by @model
}

# Workout Session Model (maps to DynamoDB table)
# Includes owner-based authorization via Cognito User Pools
type WorkoutSession @model @auth(rules: [
  { allow: owner, operations: [create, read, update, delete] }
]) {
  id: ID!                                      # Auto-generated
  userId: ID! @index(name: "byUserId", queryField: "sessionsByUserId") # Owner's Cognito Sub/ID for querying
  templateId: ID                               # Optional ID of the template used
  name: String!                                # Name of the session (can be template name or custom)
  exercises: [Exercise]                        # List of exercises performed in the session
  duration: Int                                # Optional duration in seconds
  completedAt: AWSDateTime!                    # Timestamp when session was marked complete
  # createdAt: AWSDateTime - Field automatically handled by @model
  # updatedAt: AWSDateTime - Field automatically handled by @model
}

# Example for UserProfile later (add when needed)
# type UserProfile @model @auth(rules: [{ allow: owner }]) {
#   id: ID! # Typically set to user's Cognito sub
#   userId: ID! @index(name: "byUserId", queryField: "profileByUserId", sortKeyFields: ["id"]) # Ensure this matches auth rule if id is sub
#   name: String
#   email: AWSEmail
#   # ... other profile fields like height, weight, goals etc.
# }# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

