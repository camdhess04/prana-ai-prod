# GraphQL Schema for Prana AI V3 - Includes UserProfile, TrainerNote

type Query {
  _: String # Required placeholder for schema validity
}

# --- User Profile & Notes ---

type UserProfile @model @auth(rules: [
  # User's Cognito ID (sub) is the record ID and owner
  { allow: owner, ownerField: "id", identityClaim: "sub", operations: [create, read, update, delete] }
]) {
  id: ID!                # REQUIRED: Set to user's Cognito sub (userId)
  username: String!        # REQUIRED: User's Cognito username (email)
  name: String           # Optional display name
  email: AWSEmail        # Optional email

  onboardingLevel: String # Optional: "chill", "intermediate", "nerd"

  # Metrics (Optional)
  heightCm: Float
  weightKg: Float
  age: Int
  gender: String

  # Fitness Info (Optional)
  experienceLevel: String    # e.g., "Beginner", "Intermediate", "Advanced"
  primaryGoal: String
  secondaryGoal: String
  injuriesOrLimitations: String # Text description
  performanceNotes: String   # Free text for PRs, current lifts etc.
  preferredSplit: String     # Free text for desired split e.g. "PPL"

  # Preferences (Optional)
  likedExercises: [String]   # List of exercise names
  dislikedExercises: [String] # List of exercise names
  availableDays: [String]    # e.g., ["Monday", "Wednesday", "Friday"]
  timePerSessionMinutes: Int

  # Timestamps managed by @model automatically, but added explicitly for clarity/sort keys
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  # _version, _deleted, _lastChangedAt managed automatically by @model
}

# Persistent notes for the AI Trainer context
type TrainerNote @model @auth(rules: [{ allow: owner }]) { # Uses implicit owner field linked to token
  id: ID!
  userId: ID! @index(name: "byUserNotes", queryField: "notesByUserId", sortKeyFields: ["createdAt"]) # Index to query notes by user
  note: String!
  owner: String # Explicit owner field populated by Amplify
  createdAt: AWSDateTime! # Explicit timestamp
  updatedAt: AWSDateTime! # Explicit timestamp
  # _version, _deleted, _lastChangedAt managed automatically by @model
}

# --- Workout Template & Exercise (Relational) ---

type Exercise @model @auth(rules: [ { allow: owner, ownerField: "owner" } ]) {
  id: ID!
  workoutTemplateId: ID! @index(name: "byWorkoutTemplate", queryField: "exercisesByWorkoutTemplateId", sortKeyFields: ["createdAt"])
  name: String!
  sets: String
  reps: String
  weight: String
  restPeriod: Int
  note: String
  owner: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  # _version, _deleted, _lastChangedAt managed automatically by @model
}

type WorkoutTemplate @model @auth(rules: [ { allow: owner } ]) {
  id: ID!
  userId: ID! @index(name: "byUserId", queryField: "templatesByUserId")
  name: String!
  description: String
  exercises: [Exercise] @hasMany(indexName: "byWorkoutTemplate", fields: ["id"]) # Relationship
  isAIPlan: Boolean # Flag for AI generated plans
  owner: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  # _version, _deleted, _lastChangedAt managed automatically by @model
}

# --- Workout Session (Embedding SessionExercise/PerformedSet) ---

type PerformedSet { id: ID! reps: String weight: String }
type SessionExercise { id: ID! name: String! note: String performedSets: [PerformedSet] }

type WorkoutSession @model @auth(rules: [ { allow: owner } ]) {
  id: ID!
  userId: ID! @index(name: "byUserId", queryField: "sessionsByUserId", sortKeyFields: ["completedAt"])
  templateId: ID
  name: String!
  exercises: [SessionExercise] # Embedded list
  duration: Int
  completedAt: AWSDateTime!
  owner: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  # _version, _deleted, _lastChangedAt managed automatically by @model
}